/*
 * PacketAnalyzerGUI.java
 *
 * Created on December 26, 2008, 5:13 AM
 */

package snifferGUI;


import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.FileOutputStream;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.Serializable;

import net.tinyos.packet.*;
import net.tinyos.util.*;
import net.tinyos.message.Message;
import net.tinyos.message.SerialPacket;

import java.util.ArrayList;

import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;

import packetanalyzer.ParsePacket;
import packetanalyzer.WriteOutputFiles;
import packetanalyzer.RadioChannels;
/**
 *
 * @author  gonga
 */
public class PacketAnalyzerGUI extends javax.swing.JFrame {
    
    private Thread myThread;
    private ReadIOStream pktReader;   
    
    /** Creates new form PacketAnalyzerGUI */
    public PacketAnalyzerGUI() {        
        this.initComponents();
        this.renameComponents();        
        myThread = new Thread(pktReader = new ReadIOStream(this));
        myThread.start();
        //pktReader = new ReadIOStream(this);       
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        bindingGroup = new org.jdesktop.beansbinding.BindingGroup();

        filterMsgDialog = new javax.swing.JDialog();
        mainPanel = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        applyFilterJButton = new javax.swing.JButton();
        jLabel8 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        dstAddrJTextField = new javax.swing.JTextField();
        srcAddrJTextField = new javax.swing.JTextField();
        dstAddrJCheckBox = new javax.swing.JCheckBox();
        srcJCheckBox = new javax.swing.JCheckBox();
        jLabel1 = new javax.swing.JLabel();
        HeaderInspectJCheckBox = new javax.swing.JCheckBox();
        jLabel9 = new javax.swing.JLabel();
        setSamplingJButton = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        AuxJTextPane = new javax.swing.JTextPane();
        StartJButton = new javax.swing.JButton();
        elapTimeJLabel = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        MainJTextPane = new javax.swing.JTextPane();
        TimeJLabel = new javax.swing.JLabel();
        PLTYPEJLabel = new javax.swing.JLabel();
        LOWPANJLabel = new javax.swing.JLabel();
        FCFJLabel = new javax.swing.JLabel();
        GRPJLabel = new javax.swing.JLabel();
        AMJLabel = new javax.swing.JLabel();
        FRMLENJLabel = new javax.swing.JLabel();
        LENJLabel = new javax.swing.JLabel();
        DESTJLabel = new javax.swing.JLabel();
        SRCJLabel = new javax.swing.JLabel();
        DSNJLabel = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        FileJMenu = new javax.swing.JMenu();
        FileOpenJMenuItem = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JSeparator();
        FileSaveJMenuItem = new javax.swing.JMenuItem();
        jSeparator2 = new javax.swing.JSeparator();
        FileSaveAsJMenuItem = new javax.swing.JMenuItem();
        jSeparator3 = new javax.swing.JSeparator();
        FileExitJMenuItem = new javax.swing.JMenuItem();
        editJMenu = new javax.swing.JMenu();
        ToolsJMenu = new javax.swing.JMenu();
        TLSEnableDisplayJChkBoxMenuItem = new javax.swing.JCheckBoxMenuItem();
        jSeparator4 = new javax.swing.JSeparator();
        DisplayBufJMenuItem = new javax.swing.JMenuItem();
        jSeparator5 = new javax.swing.JSeparator();
        RadioChannelJMenuItem = new javax.swing.JMenuItem();
        jSeparator6 = new javax.swing.JSeparator();
        TimerJMenuItem = new javax.swing.JMenuItem();
        jSeparator7 = new javax.swing.JSeparator();
        jSeparator8 = new javax.swing.JSeparator();
        jSeparator9 = new javax.swing.JSeparator();

        filterMsgDialog.setAlwaysOnTop(true);
        filterMsgDialog.setBackground(java.awt.Color.red);
        filterMsgDialog.setMinimumSize(new java.awt.Dimension(20, 20));

        org.jdesktop.beansbinding.Binding binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, applyFilterJButton, org.jdesktop.beansbinding.ELProperty.create("SELECT WHICH ADDRESSES YOU WANT TO FILTER[CHECKBOX]"), filterMsgDialog, org.jdesktop.beansbinding.BeanProperty.create("title"));
        bindingGroup.addBinding(binding);

        javax.swing.GroupLayout filterMsgDialogLayout = new javax.swing.GroupLayout(filterMsgDialog.getContentPane());
        filterMsgDialog.getContentPane().setLayout(filterMsgDialogLayout);
        filterMsgDialogLayout.setHorizontalGroup(
            filterMsgDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        filterMsgDialogLayout.setVerticalGroup(
            filterMsgDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        mainPanel.setBackground(new java.awt.Color(153, 153, 153));
        mainPanel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 102)));

        jPanel1.setBackground(new java.awt.Color(153, 153, 153));
        jPanel1.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));
        jPanel1.setMaximumSize(new java.awt.Dimension(100, 100));

        applyFilterJButton.setText("APPLY FILTER");
        applyFilterJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                applyFilterJButtonActionPerformed(evt);
            }
        });

        jLabel8.setText("DST ADDR");

        jLabel7.setText("SRC ADDR");

        dstAddrJTextField.setText("addr");
        dstAddrJTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dstAddrJTextFieldActionPerformed(evt);
            }
        });

        srcAddrJTextField.setText("addr");
        srcAddrJTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                srcAddrJTextFieldActionPerformed(evt);
            }
        });

        dstAddrJCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dstAddrJCheckBoxActionPerformed(evt);
            }
        });

        srcJCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                srcJCheckBoxActionPerformed(evt);
            }
        });

        jLabel1.setText("COMMAND PANEL");

        HeaderInspectJCheckBox.setText("jCheckBox1");
        HeaderInspectJCheckBox.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                HeaderInspectJCheckBoxStateChanged(evt);
            }
        });
        HeaderInspectJCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                HeaderInspectJCheckBoxActionPerformed(evt);
            }
        });

        jLabel9.setText("DECODE ROUTINGHDR");

        setSamplingJButton.setText("SET_SMPL");
        setSamplingJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                setSamplingJButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                                    .addComponent(jLabel7)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addComponent(srcAddrJTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                                    .addComponent(jLabel8)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addComponent(dstAddrJTextField))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 32, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(dstAddrJCheckBox)
                                .addComponent(srcJCheckBox))
                            .addComponent(HeaderInspectJCheckBox, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(16, 16, 16))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(applyFilterJButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(setSamplingJButton))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(44, 44, 44)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(HeaderInspectJCheckBox)
                    .addComponent(jLabel9))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 6, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel8)
                            .addComponent(dstAddrJTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel7)
                            .addComponent(srcAddrJTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(applyFilterJButton)
                            .addComponent(setSamplingJButton))
                        .addGap(13, 13, 13))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(dstAddrJCheckBox)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(srcJCheckBox)
                        .addGap(58, 58, 58))))
        );

        AuxJTextPane.setBackground(new java.awt.Color(0, 0, 0));
        AuxJTextPane.setEditable(false);
        AuxJTextPane.setForeground(new java.awt.Color(255, 255, 255));
        jScrollPane2.setViewportView(AuxJTextPane);

        StartJButton.setForeground(new java.awt.Color(255, 0, 51));
        StartJButton.setText("Start");
        StartJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                StartJButtonActionPerformed(evt);
            }
        });

        elapTimeJLabel.setText("ELAP_TIME");

        jLabel2.setText("DSN_NUM");

        jLabel3.setText("HEADER");

        jLabel4.setText("SNIFFER");

        jLabel5.setText("PAYLOAD");

        jLabel6.setText("FRAME");

        MainJTextPane.setBackground(new java.awt.Color(0, 0, 0));
        MainJTextPane.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED, null, new java.awt.Color(0, 0, 255), null, null));
        MainJTextPane.setEditable(false);
        MainJTextPane.setForeground(new java.awt.Color(255, 255, 255));
        MainJTextPane.setCaretColor(new java.awt.Color(255, 255, 255));
        jScrollPane1.setViewportView(MainJTextPane);

        TimeJLabel.setText("  TIME");

        PLTYPEJLabel.setText("PLD_TYPE");

        LOWPANJLabel.setText("6LOWPAN");

        FCFJLabel.setText("FCF");

        GRPJLabel.setText("GROUP");

        AMJLabel.setText("AMTYPE");

        FRMLENJLabel.setText("FRMLEN");

        LENJLabel.setText("PLDLEN");

        DESTJLabel.setText("DEST");

        SRCJLabel.setText("SRC");

        DSNJLabel.setText("  DSN");

        javax.swing.GroupLayout mainPanelLayout = new javax.swing.GroupLayout(mainPanel);
        mainPanel.setLayout(mainPanelLayout);
        mainPanelLayout.setHorizontalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainPanelLayout.createSequentialGroup()
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(mainPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(mainPanelLayout.createSequentialGroup()
                                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(elapTimeJLabel)
                                    .addComponent(jLabel2)
                                    .addComponent(jLabel3)
                                    .addComponent(jLabel4)
                                    .addComponent(jLabel5)
                                    .addComponent(jLabel6))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 985, Short.MAX_VALUE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, mainPanelLayout.createSequentialGroup()
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 825, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(StartJButton)
                                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                    .addGroup(mainPanelLayout.createSequentialGroup()
                        .addGap(27, 27, 27)
                        .addComponent(TimeJLabel)
                        .addGap(89, 89, 89)
                        .addComponent(DSNJLabel)
                        .addGap(37, 37, 37)
                        .addComponent(SRCJLabel)
                        .addGap(18, 18, 18)
                        .addComponent(DESTJLabel)
                        .addGap(18, 18, 18)
                        .addComponent(LENJLabel)
                        .addGap(18, 18, 18)
                        .addComponent(FRMLENJLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(AMJLabel)
                        .addGap(18, 18, 18)
                        .addComponent(GRPJLabel)
                        .addGap(18, 18, 18)
                        .addComponent(FCFJLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(LOWPANJLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(PLTYPEJLabel)))
                .addContainerGap())
        );
        mainPanelLayout.setVerticalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainPanelLayout.createSequentialGroup()
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, mainPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(TimeJLabel)
                            .addComponent(DSNJLabel)
                            .addComponent(SRCJLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(DESTJLabel)
                            .addComponent(LENJLabel)
                            .addComponent(FRMLENJLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(AMJLabel)
                            .addComponent(GRPJLabel)
                            .addComponent(FCFJLabel)
                            .addComponent(LOWPANJLabel)
                            .addComponent(PLTYPEJLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 210, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(mainPanelLayout.createSequentialGroup()
                        .addComponent(StartJButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(mainPanelLayout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(elapTimeJLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 9, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 9, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 9, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 9, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 9, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 9, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(48, Short.MAX_VALUE))
                    .addGroup(mainPanelLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())))
        );

        FileJMenu.setText("File");

        FileOpenJMenuItem.setText("Open File");
        FileOpenJMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                FileOpenJMenuItemActionPerformed(evt);
            }
        });
        FileJMenu.add(FileOpenJMenuItem);
        FileJMenu.add(jSeparator1);

        FileSaveJMenuItem.setText("Save");
        FileSaveJMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                FileSaveJMenuItemActionPerformed(evt);
            }
        });
        FileJMenu.add(FileSaveJMenuItem);
        FileJMenu.add(jSeparator2);

        FileSaveAsJMenuItem.setText("Save As");
        FileSaveAsJMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                FileSaveAsJMenuItemActionPerformed(evt);
            }
        });
        FileJMenu.add(FileSaveAsJMenuItem);
        FileJMenu.add(jSeparator3);

        FileExitJMenuItem.setText("Exit");
        FileExitJMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                FileExitJMenuItemActionPerformed(evt);
            }
        });
        FileJMenu.add(FileExitJMenuItem);

        jMenuBar1.add(FileJMenu);

        editJMenu.setText("Edit");
        jMenuBar1.add(editJMenu);

        ToolsJMenu.setText("Tools");

        TLSEnableDisplayJChkBoxMenuItem.setSelected(true);
        TLSEnableDisplayJChkBoxMenuItem.setText("Enable Display");
        TLSEnableDisplayJChkBoxMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TLSEnableDisplayJChkBoxMenuItemActionPerformed(evt);
            }
        });
        ToolsJMenu.add(TLSEnableDisplayJChkBoxMenuItem);
        ToolsJMenu.add(jSeparator4);

        DisplayBufJMenuItem.setText("Configure Display Buffer Size");
        DisplayBufJMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DisplayBufJMenuItemActionPerformed(evt);
            }
        });
        ToolsJMenu.add(DisplayBufJMenuItem);
        ToolsJMenu.add(jSeparator5);

        RadioChannelJMenuItem.setText("Change Radio Channel");
        RadioChannelJMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RadioChannelJMenuItemActionPerformed(evt);
            }
        });
        ToolsJMenu.add(RadioChannelJMenuItem);
        ToolsJMenu.add(jSeparator6);

        TimerJMenuItem.setText("Set ParserTimeOut");
        TimerJMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TimerJMenuItemActionPerformed(evt);
            }
        });
        ToolsJMenu.add(TimerJMenuItem);
        ToolsJMenu.add(jSeparator7);
        ToolsJMenu.add(jSeparator8);
        ToolsJMenu.add(jSeparator9);

        jMenuBar1.add(ToolsJMenu);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(mainPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(mainPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(39, Short.MAX_VALUE))
        );

        bindingGroup.bind();

        pack();
    }// </editor-fold>//GEN-END:initComponents

private void dstAddrJTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dstAddrJTextFieldActionPerformed
// TODO add your handling code here:
}//GEN-LAST:event_dstAddrJTextFieldActionPerformed

private void srcAddrJTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_srcAddrJTextFieldActionPerformed
// TODO add your handling code here:
}//GEN-LAST:event_srcAddrJTextFieldActionPerformed

private void StartJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_StartJButtonActionPerformed
// TODO add your handling code here:
        if(startFlag == false){           
            StartJButton.setText("STOP");
            StartJButton.setForeground(java.awt.Color.BLUE);
            startFlag= true;
        }else{
            StartJButton.setText("START");
            StartJButton.setForeground(java.awt.Color.RED);
            startFlag = false;
            timeOutFlag = false;
            timeOut    = 0;
        }
        //MainJTextPane.setText("");
        ParsePacket.instance().resetElapsedTime();
}//GEN-LAST:event_StartJButtonActionPerformed

private void FileOpenJMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_FileOpenJMenuItemActionPerformed
// TODO add your handling code here:
     JFileChooser fileOpenChooser = new JFileChooser(); 
        int selection = fileOpenChooser.showOpenDialog(FileJMenu);          
        
        if(selection == JFileChooser.APPROVE_OPTION){
            pktReader.filename = "";
            pktReader.filename = pktReader.path.concat(fileOpenChooser.getSelectedFile().getName());
            //MainJTextPane.setText(pktReader.filename);
            if(startFlag == false){
                pktReader.FileOpenReadFromFile();
                ParsePacket.instance().resetElapsedTime();
                pktReader.parseFile();
            }
        }
}//GEN-LAST:event_FileOpenJMenuItemActionPerformed

private void FileSaveJMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_FileSaveJMenuItemActionPerformed
// TODO add your handling code here:
    this.pktReader.filename =""+this.pktReader.path.concat("output.txt");  
    
    if(startFlag == false){
         this.saveFlag = true;
         this.pktReader.FileSaveWriteToFile();
    }    
}//GEN-LAST:event_FileSaveJMenuItemActionPerformed

private void FileSaveAsJMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_FileSaveAsJMenuItemActionPerformed
// TODO add your handling code here:
        JFileChooser fileOpenChooser = new JFileChooser();
        int selection = fileOpenChooser.showSaveDialog(FileJMenu);    

        if(selection == JFileChooser.APPROVE_OPTION){             
             this.pktReader.filename ="";
             this.pktReader.filename = this.pktReader.path.concat(fileOpenChooser.getSelectedFile().getName().trim());
             if(startFlag == false){
                this.saveFlag = true;
                this.pktReader.FileSaveWriteToFile();                
             }
        }
    
}//GEN-LAST:event_FileSaveAsJMenuItemActionPerformed

private void FileExitJMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_FileExitJMenuItemActionPerformed
// TODO add your handling code here:
    this.pktReader.filename = pktReader.path.concat("output.txt");
    
        if(!exitFlag){
            if(!saveFlag){
                this.pktReader.FileSaveWriteToFile();
            }
           this.pktReader.filename = "";
           WriteOutputFiles.instance().closeFiles();
        }
        exitFlag = true;
        startFlag = false;
        this.pktReader.closeApp();
}//GEN-LAST:event_FileExitJMenuItemActionPerformed

private void applyFilterJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_applyFilterJButtonActionPerformed
// TODO add your handling code here:
        
    if(applyFilterFlag == false){
            if(!srcCheckedBoxFlag && !dstCheckedBoxFlag){                
                 new WarningDialog(this, new String[]{chechMsg}).setVisible(true);
            }else{                
                
                FilterMsg msg = new FilterMsg();
                
                short val     = 0;
                int srcAddr, dstAddr; 
                try{                    
                   
                    srcAddr = Integer.parseInt(Integer.decode("0x"+srcAddrJTextField.getText()).toString());
                    dstAddr = Integer.parseInt(Integer.decode("0x"+dstAddrJTextField.getText()).toString());
                    System.out.print("SENDING FILTER QUERY ...!  -> ");
                }catch(Exception exp){ 
                    
                     new WarningDialog(this, new String[]{srcAddrInvalid, dstAddrInvalid}).setVisible(true);
                     
                     return;
                }
                
                
                if(!srcCheckedBoxFlag && dstCheckedBoxFlag){
                    val = 2;
                    msg.set_dst_addr(dstAddr);
                    msg.set_src_addr(0);
                    msg.set_val(val);
                    System.out.println("[FILTER_BY_DST_ADDR: "+dstAddr+" DEFAULT_SRC_ADDR: "+srcAddr+" ]");
                }else if(srcCheckedBoxFlag && !dstCheckedBoxFlag){
                    val = 1;
                    msg.set_dst_addr(0);
                    msg.set_src_addr(srcAddr);
                    msg.set_val(val);
                    System.out.println("[FILTER_BY_SRC_ADDR: "+srcAddr+" DEFAULT_DST_ADDR: "+dstAddr+" ]");
                }else{
                    val = 3;
                    msg.set_dst_addr(dstAddr);
                    msg.set_src_addr(srcAddr);
                    msg.set_val(val);
                    System.out.println("[FILTER_BY_SRC_AND_DST_ADDRs: ("+srcAddr+" , "+dstAddr+") ]");
                }
                            
                this.pktReader.send(0xffff, msg);
               
                applyFilterJButton.setText("DISABL. FILTER");            
                applyFilterJButton.setForeground(java.awt.Color.RED);
                applyFilterFlag= true;
            }
    }else{
            applyFilterJButton.setText("APPLY FILTER");
            applyFilterJButton.setForeground(java.awt.Color.BLACK);
            
            applyFilterFlag = false;
            srcCheckedBoxFlag  = dstCheckedBoxFlag = false;
            
            FilterMsg msg = new FilterMsg();
            msg.set_dst_addr(0);
            msg.set_src_addr(0);
            msg.set_val((short)0);
            
            this.pktReader.send(0xffff, msg);
        
            this.dstAddrJTextField.setText("");
            this.srcAddrJTextField.setText("");
            this.dstAddrJCheckBox.setSelected(false);
            this.srcJCheckBox.setSelected(false);
            System.out.println("SENDING FILTER_DISABLE_QUERY...!");
    }
    
    
}//GEN-LAST:event_applyFilterJButtonActionPerformed

private void dstAddrJCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dstAddrJCheckBoxActionPerformed
// TODO add your handling code here:
    this.dstCheckedBoxFlag = !dstCheckedBoxFlag;    
}//GEN-LAST:event_dstAddrJCheckBoxActionPerformed

private void srcJCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_srcJCheckBoxActionPerformed
// TODO add your handling code here:    
    this.srcCheckedBoxFlag = !srcCheckedBoxFlag;   
}//GEN-LAST:event_srcJCheckBoxActionPerformed

private void TLSEnableDisplayJChkBoxMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TLSEnableDisplayJChkBoxMenuItemActionPerformed
// TODO add your handling code here:
    //this.TLSEnableDisplayJChkBoxMenuItem.setSelected(true);
    if(this.TLSEnableDisplayJChkBoxMenuItem.isSelected()){
        this.TLSEnableDisplayJChkBoxMenuItem.setText("Disable Display");
        this.getScreen0().setText("");
        this.getScreen1().setText("");
    }else{
        this.TLSEnableDisplayJChkBoxMenuItem.setText("Enable Display");
        this.getScreen0().setText("");
        this.getScreen1().setText("");
    }
}//GEN-LAST:event_TLSEnableDisplayJChkBoxMenuItemActionPerformed

private void DisplayBufJMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DisplayBufJMenuItemActionPerformed
// TODO add your handling code here:
     
    String[] dispBufferVals = new String[] { "1","25","50","75","100","200","500"};
    String input = (String) JOptionPane.showInputDialog(
        this,
        "Please select the a new value for the display buffer",
        "Display Buffer Size Configuration", JOptionPane.INFORMATION_MESSAGE,
        new ImageIcon("ADDD"), dispBufferVals, dispBufferVals[4]);
   
    int store = this.DISP_BUFSIZE;
    try{
        this.DISP_BUFSIZE = Integer.parseInt(input);
    }catch(Exception ex){
        this.DISP_BUFSIZE = store;
    }
    
}//GEN-LAST:event_DisplayBufJMenuItemActionPerformed

private void RadioChannelJMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RadioChannelJMenuItemActionPerformed
// TODO add your handling code here:
    String[] CC2420Channels = new String[]{
                                     RadioChannels.RADIO_CHANNEL11,
                                     RadioChannels.RADIO_CHANNEL12,
                                     RadioChannels.RADIO_CHANNEL13,
                                     RadioChannels.RADIO_CHANNEL14,
                                     RadioChannels.RADIO_CHANNEL15,
                                     RadioChannels.RADIO_CHANNEL16,
                                     RadioChannels.RADIO_CHANNEL17,
                                     RadioChannels.RADIO_CHANNEL18,
                                     RadioChannels.RADIO_CHANNEL19,
                                     RadioChannels.RADIO_CHANNEL20,
                                     RadioChannels.RADIO_CHANNEL21,
                                     RadioChannels.RADIO_CHANNEL22,
                                     RadioChannels.RADIO_CHANNEL23,
                                     RadioChannels.RADIO_CHANNEL24,
                                     RadioChannels.RADIO_CHANNEL25,
                                     RadioChannels.RADIO_CHANNEL26,
                                     };
    
     String input = (String) JOptionPane.showInputDialog(
        this,
        "_________Please select the new Radio Channel_________",
        "Radio Channel Configuration", JOptionPane.INFORMATION_MESSAGE,
        new ImageIcon("ADDD"), CC2420Channels, CC2420Channels[15]);
   
    int defaultChannel = 0;
    try{
        defaultChannel = Integer.parseInt(RadioChannels.DEFAUL_CHANNEL);
        
        FilterMsg msg = new FilterMsg();
        
        msg.set_val((short)Integer.parseInt(input));
        msg.set_dst_addr(0);
        msg.set_src_addr(0);
        
        this.pktReader.send(0xffff, msg);
        
        System.out.println("SENDING SET_RADIO_CHANNEL_QUERY...! SELECTED_CHANNEL["+input+"]");
    }catch(Exception ex){
        defaultChannel = Integer.parseInt(RadioChannels.DEFAUL_CHANNEL);
    }
}//GEN-LAST:event_RadioChannelJMenuItemActionPerformed

private void HeaderInspectJCheckBoxStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_HeaderInspectJCheckBoxStateChanged
    // TODO add your handling code here:   
}//GEN-LAST:event_HeaderInspectJCheckBoxStateChanged

private void HeaderInspectJCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_HeaderInspectJCheckBoxActionPerformed
// TODO add your handling code here:
     ParsePacket.checkHeader = ! ParsePacket.checkHeader;
    if(ParsePacket.checkHeader){
        System.out.println("INSPECT ROUTING HEADER");
    }else{
           System.out.println("DISABLE INSPECT ROUTING HEADER");
    }
}//GEN-LAST:event_HeaderInspectJCheckBoxActionPerformed

private void TimerJMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TimerJMenuItemActionPerformed
// TODO add your handling code here:
    String[] dispBufferVals = new String[] { "1","5",
                                             "10","15",
                                             "20","25",
                                             "30", "45",
                                             "60", "75",
                                             "90", "120",
                                             "240"};
    String input = (String) JOptionPane.showInputDialog(
        this,
        "Please select the timeout [minutes] ",
        "Parser Timer Configuration", JOptionPane.INFORMATION_MESSAGE,
        new ImageIcon("ADDD"), dispBufferVals, dispBufferVals[2]);
       
    try{
        this.timeOut = 60*Integer.parseInt(input);
        this.timeOutFlag = true;    
    }catch(Exception ex){
        System.out.println("Exception Timeout = 0");
        this.timeOut = 0;
        this.timeOutFlag = false;
    }
}//GEN-LAST:event_TimerJMenuItemActionPerformed

private void setSamplingJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_setSamplingJButtonActionPerformed
    // TODO add your handling code here:
        if(startSampling == false){           
            setSamplingJButton.setText("DIS_SMPL");
            setSamplingJButton.setForeground(java.awt.Color.BLUE);
            startSampling= true;
        }else{
            setSamplingJButton.setText("SET_SMPL");
            setSamplingJButton.setForeground(java.awt.Color.RED);
            startSampling = false;
        }
       if(startSampling){ 
                String[] dispBufferVals = new String[] { "10","15",
                                             "20","25",
                                             "30","40",
                                             "50", "75",
                                             "100", "150",
                                             "200", "250",
                                             "300"};
                String input = (String) JOptionPane.showInputDialog(
                            this,
                "Please select the sampling period  ",
                "Parser Sampler Configuration", JOptionPane.INFORMATION_MESSAGE,
                new ImageIcon("ADDD"), dispBufferVals, dispBufferVals[6]);
                try{
                    int period = Integer.parseInt(input);
                    sendSamplingMessage(120, period);
                }catch(Exception ex){
                     setSamplingJButton.setText("SET_SMPL");
                     setSamplingJButton.setForeground(java.awt.Color.RED);
                     startSampling = false;
                }
       }else{
            sendSamplingMessage(121, 0);
       }       
}//GEN-LAST:event_setSamplingJButtonActionPerformed

private  void sendSamplingMessage(int val, int period){
    try{
            this.samplingPeriod = period;
            FilterMsg msg = new FilterMsg();       
            msg.set_val((short)val);
            msg.set_src_addr(period);           
            msg.set_dst_addr(0);        
            this.pktReader.send(0xffff, msg);
           
            if(period != 0){
                System.out.println("SENDING SAMPLING_QUERY..._SAMPLING_PERIOD["+samplingPeriod+"]");                    
            }else{
                System.out.println("SENDING DISABLE_SAMPLING_QUERY.");                    
            }
        }catch(Exception ex){
            System.out.println("Exception Sampling = 0");        
            this.samplingPeriod = 0;
            return;
        } 
}
private int samplingPeriod = 0;
    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) {
        /*java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new PacketAnalyzerGUI().setVisible(true);
            }
        });*/
    } 
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel AMJLabel;
    private javax.swing.JTextPane AuxJTextPane;
    private javax.swing.JLabel DESTJLabel;
    private javax.swing.JLabel DSNJLabel;
    private javax.swing.JMenuItem DisplayBufJMenuItem;
    private javax.swing.JLabel FCFJLabel;
    private javax.swing.JLabel FRMLENJLabel;
    private javax.swing.JMenuItem FileExitJMenuItem;
    private javax.swing.JMenu FileJMenu;
    private javax.swing.JMenuItem FileOpenJMenuItem;
    private javax.swing.JMenuItem FileSaveAsJMenuItem;
    private javax.swing.JMenuItem FileSaveJMenuItem;
    private javax.swing.JLabel GRPJLabel;
    private javax.swing.JCheckBox HeaderInspectJCheckBox;
    private javax.swing.JLabel LENJLabel;
    private javax.swing.JLabel LOWPANJLabel;
    private javax.swing.JTextPane MainJTextPane;
    private javax.swing.JLabel PLTYPEJLabel;
    private javax.swing.JMenuItem RadioChannelJMenuItem;
    private javax.swing.JLabel SRCJLabel;
    private javax.swing.JButton StartJButton;
    private javax.swing.JCheckBoxMenuItem TLSEnableDisplayJChkBoxMenuItem;
    private javax.swing.JLabel TimeJLabel;
    private javax.swing.JMenuItem TimerJMenuItem;
    private javax.swing.JMenu ToolsJMenu;
    private javax.swing.JButton applyFilterJButton;
    private javax.swing.JCheckBox dstAddrJCheckBox;
    private javax.swing.JTextField dstAddrJTextField;
    private javax.swing.JMenu editJMenu;
    private javax.swing.JLabel elapTimeJLabel;
    private javax.swing.JDialog filterMsgDialog;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JSeparator jSeparator4;
    private javax.swing.JSeparator jSeparator5;
    private javax.swing.JSeparator jSeparator6;
    private javax.swing.JSeparator jSeparator7;
    private javax.swing.JSeparator jSeparator8;
    private javax.swing.JSeparator jSeparator9;
    private javax.swing.JPanel mainPanel;
    private javax.swing.JButton setSamplingJButton;
    private javax.swing.JTextField srcAddrJTextField;
    private javax.swing.JCheckBox srcJCheckBox;
    private org.jdesktop.beansbinding.BindingGroup bindingGroup;
    // End of variables declaration//GEN-END:variables
    
    private void renameComponents(){
        setTitle("PACKET ANALYZER DEMO for TinyOS-2.x Applications - KTH/School of Technology and Health");
        FileJMenu.setMnemonic('F');        
        FileOpenJMenuItem.setMnemonic('O');
        FileOpenJMenuItem.setText("Open File");
        FileSaveJMenuItem.setMnemonic('S');
        FileSaveJMenuItem.setText("Save");
        FileSaveAsJMenuItem.setMnemonic('S');
        FileSaveAsJMenuItem.setText("Save As");
        FileExitJMenuItem.setMnemonic('E');
        FileExitJMenuItem.setText("Exit"); 
        StartJButton.setText("START");
        StartJButton.setForeground(java.awt.Color.RED);  
        srcAddrJTextField.setText("");
        dstAddrJTextField.setText("");
        this.TLSEnableDisplayJChkBoxMenuItem.setSelected(false);
       
    }
    public javax.swing.JTextPane getScreen0(){
        return this.MainJTextPane;
    }
    public javax.swing.JTextPane getScreen1(){
        return this.AuxJTextPane;
    }
     
    public boolean startFlag = false;
    public boolean stopFlag  = false;
    public boolean openFlag  = false;
    public boolean exitFlag  = false;
    public boolean saveFlag  = false;
    
    public boolean enableDisplays = true;
    
    private boolean applyFilterFlag  = false;
    private boolean srcCheckedBoxFlag = false;
    private boolean dstCheckedBoxFlag = false;                    
            
    private static int DISP_BUFSIZE = 50;
    
    private float  timeOut=0;
    private boolean timeOutFlag = false;
    
    private boolean startSampling = false;
    
    private static String[] warningMessages;
    private static final String srcAddrEmpty   = "  Source Address is Empty AND/OR";
    private static final String srcAddrInvalid = "  Source Address is Invalid AND/OR";
    
    private static final String dstAddrEmpty   = "  Destination Address is Empty";
    private static final String dstAddrInvalid = "  Destination Address is Invalid";
    
    private static final String chechMsg       = "  Check at least one address to filter";
    
    
    
    
    
   class ReadIOStream implements Runnable, Serializable{
    
        private PacketAnalyzerGUI dispp;
        private PacketSource reader;
    
        private static final int  TSMSG_POS0  = 8;    
   
        private  byte[] frame; 
                    
        public String  filename ="";
        private String screen0Buffer = "", screen1Buffer="";
        public  String  path     ="../outputs/";
        public  String  inpath   ="../saveInctraffic/";
        
        private ArrayList<byte[]> listOfPackets;    
    
        public ReadIOStream(PacketAnalyzerGUI display){
           
           this.listOfPackets = new ArrayList<byte[]>();
           
           dispp = display;                      
        }        
        
        public void run(){        
             reader = BuildSource.makePacketSource();
             if(reader != null){
                 while(dispp.exitFlag == false){   
                     //if(dispp.startFlag){
                         readPacketInBytes();
                     //}
                     if(this.dispp.exitFlag){
                        break;
                     }
                 }  
                 
             }else {
                 System.out.println("UNABLE TO OPEN SERIAL PORT, verify the MOTECOM environment variable");
             }            
        }                
        
        private void readPacketInBytes(){
            
            int counter   = 0;
            
            try{                
                if(dispp.openFlag == false){
                     if(reader == null){
                        reader = BuildSource.makePacketSource();                       
                      }
                      if(!dispp.openFlag)
                        reader.open(PrintStreamMessenger.err);
                      dispp.openFlag = true;
                }
                for( ; ; ){
                    if(dispp.startFlag == false || dispp.exitFlag){                   
                         //ParsePacket.instance().resetElapsedTime();                                                  
                         break;                                        
                    }
                    if(dispp.exitFlag){
                        reader.close();
                        dispp.openFlag = false;
                        dispp.pktReader.reader.close();
                        this.dispp.setVisible(false);
                        break;
                    }
                    
                    if((dispp.timeOutFlag == true)){
                        if(ParsePacket.instance().getElapsedTime() > (dispp.timeOut+1)){               
                                dispp.startFlag   = false;
                                dispp.timeOutFlag = false;
                                dispp.timeOut = 0;
                                dispp.StartJButton.setText("START");
                                dispp.StartJButton.setForeground(java.awt.Color.RED);
                                ParsePacket.instance().resetElapsedTime();                                                  
                        }
                        if(timeOut == 0){
                            System.out.println("Timer Disabled");
                        }
                    }
                    
                    byte[] packet = reader.readPacket();
                    
                    this.frame = new byte[packet.length-TSMSG_POS0];
                    
                    System.arraycopy(packet, TSMSG_POS0, frame, 0, packet.length-TSMSG_POS0);
                    this.listOfPackets.add(frame);
                    
                    if(++counter % DISP_BUFSIZE == 0){
                       
                       if(this.dispp.TLSEnableDisplayJChkBoxMenuItem.isSelected()){
                            this.dispp.getScreen0().setText(screen0Buffer);
                            this.dispp.getScreen1().setText(screen1Buffer);                        
                       }
                       if(DISP_BUFSIZE != 1){
                            screen0Buffer= ""; 
                            screen1Buffer="";                      
                       }else if(DISP_BUFSIZE == 1 && (counter % 50 == 0)){
                            screen0Buffer= ""; 
                            screen1Buffer="";      
                       }
                    }
                    screen0Buffer = ParsePacket.instance().getParsedFrame(frame) +screen0Buffer;
                    screen1Buffer = ParsePacket.instance().getDisplay()+screen1Buffer;                                                            
                }               
            }catch(Exception ex){
                //ex.printStackTrace();
            }        
        }
        
        public synchronized void closeApp(){
           try{
               this.reader.close();
               System.out.println("\tApp Closed");
               System.exit(2);
           }catch(Exception ex){ ex.printStackTrace(); }
        
        }
        public synchronized  void FileOpenReadFromFile(){
          try{
                ObjectInputStream ois = null;
                FileInputStream fin = new FileInputStream(filename);
                ois = new ObjectInputStream(fin);
                System.out.println("FILE_NAME: "+filename);
                try{
                    this.listOfPackets.clear();
                    this.listOfPackets = (ArrayList<byte[]>)ois.readObject();                    
                }catch(Exception ex){ ex.printStackTrace(); }
                ois.close();
                fin.close();
          }catch (IOException io){
                System.err.println("\tunpossible to read the Object\n\t" + io.getMessage());
          }
        }
     
        /*
         *
         *
         */
        public synchronized void FileSaveWriteToFile() {
          try{
                ObjectOutputStream oos = null;
                oos = new ObjectOutputStream(new FileOutputStream(filename));                
                try{                    
                    oos.writeObject(this.listOfPackets);                     
                }catch(Exception ex){ex.printStackTrace();}
                oos.flush();                
                oos.close();
          }catch (IOException io){
                System.err.println("\tunpossible to write the Object\n\t" + io.getMessage());       }
       }
        
       public void parseFile(){           
           try{              
               screen0Buffer = "";
               screen1Buffer = "";               
               
               this.dispp.getScreen0().setText("PARSING OBJECT FILE STARTED\n");
               this.dispp.getScreen1().setText("PARSING OBJECT FILE STARTED\n"); 
               
               for(int k = 0 ; k < this.listOfPackets.size()  ; k++ ){
                    byte[] packet = this.listOfPackets.get(k);                                                           
                    ParsePacket.instance().getParsedFrame(packet);
               }
               
               this.dispp.getScreen0().setText("PARSING OBJECT FILE FINISHED\n");
               this.dispp.getScreen1().setText("PARSING OBJECT FILE FINISHED\n"); 
               
               //this.listOfPackets.clear();
               System.out.println("File Parse Finished");
            }catch(Exception ex){ 
                System.err.println(ex);
                System.out.println("An Error Occured While Parsing File");
            }
           
        } //end of 
       
       synchronized public void send(int moteId, Message m){
            int amType = m.amType();
            byte[] data = m.dataGet();

            
            if (amType < 0) {
                System.out.println("unknown AM type for message " +m.getClass().getName());
                return;
            }
            try{
                SerialPacket packet = new SerialPacket(SerialPacket.offset_data(0) + data.length);
                packet.set_header_dest(moteId);
                packet.set_header_type((short)amType);
                packet.set_header_length((short)data.length);
                packet.dataSet(data, 0, packet.offset_data(0), data.length);

                byte[] packetData = packet.dataGet();
                byte[] fullPacket = new byte[packetData.length + 1];
                fullPacket[0] = Serial.TOS_SERIAL_ACTIVE_MESSAGE_ID;
                System.arraycopy(packetData, 0, fullPacket, 1, packetData.length);
            
                this.reader.writePacket(fullPacket);
               
            }catch(Exception ex){
                ex.printStackTrace();
            }
       }
       
    }
   
   
   
   /**
    *DISPLAYS WARNING MESSAGE 
    */
   public class WarningDialog extends javax.swing.JDialog {
    
       public WarningDialog(javax.swing.JFrame parent, String[] errorMsgs) {
            super(parent, "....WARNING .....", true);

            javax.swing.Box b = javax.swing.Box.createVerticalBox();
            b.add(javax.swing.Box.createGlue());
            
            for(int k = 0; k < errorMsgs.length; k++){
                javax.swing.JLabel label = new javax.swing.JLabel(errorMsgs[k]);
                label.setForeground(java.awt.Color.RED);
                b.add(label);         
            }
            
            b.add(javax.swing.Box.createGlue());            
            getContentPane().add(b, "Center");                        
            
            javax.swing.JPanel p2 = new javax.swing.JPanel();
            javax.swing.JButton ok = new javax.swing.JButton("Ok");
            p2.add(ok);
            getContentPane().add(p2, "South");

            ok.addActionListener(new ActionListener() {

                public void actionPerformed(ActionEvent e) {
                    setVisible(false);
                }
            });

            setSize(250, 150);
       }
   }
}
